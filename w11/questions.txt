which syntax is used for creating this table:
	table name: cats
	columns:	1) name, variable length string to store a cat's name, maximum 50 characters
				2) age, an integer type to store a cat's age

A.
CREATE TABLE cats(
	name VARCHAR(50),
	age INT
);

B.
CREATE TABLE cats(
	name VARCHAR(50),
	age INTEGER
);

C.
A and B

Note, however, that the one place the exact type name matters is in autoincrement columns: These must be INTEGER (and PRIMARY KEY), not just INT

============================================================

which syntax is used for creating this table:
	table name: cats
	columns:	1) name, variable length string to store a cat's name, maximum 50 characters
				2) age, an integer type to store a cat's age
				3) weight, a floating point for a cat's weight

A.
CREATE TABLE cats(
	name VARCHAR(50),
	age INT,
	weight FLOAT
);

B.
CREATE TABLE cats(
	name VARCHAR(50),
	age INT,
	weight NUMERIC
);

C.
CREATE TABLE cats(
	name VARCHAR(50),
	age INT,
	weight REAL
);

D.
A, B and C

============================================================

which syntax is used for getting cats' schema?
p.s.: on sqlite command line this will be: .schema cats
p.p.s: on other dbms, this will be: desc cats

A.
PRAGMA table_info('cats');

B.
SELECT sql 
FROM sqlite_master 
WHERE name = 'cats';

C.
A and B

============================================================

which syntax is used for deleting cats table?

A.
DELETE cats;

B.
DELETE table cats;

C.
DELETE table if exists cats;

D. 
DROP table cats;

E.
DROP table if exists cats;

F.
A, B and C

G.
D and E

============================================================

which syntax is used for adding a data to cats table
name: Kitty
age: 3
weight: 3.6 kg

A.
INSERT INTO cats
VALUES('Kitty', 3, 3.6);

B.
INSERT INTO cats(name, age, weight)
VALUES('Kitty', 3, 3.6);

C.
INSERT INTO cats(age, weight, name)
VALUES(3, 3.6, 'Kitty');

D.
A and B

E.
A, B and C

============================================================

not a question, but we can insert many rows using a single command

INSERT INTO cats(name, age, weight)
VALUES('Kitty', 3, 3.6),
	('Lili', 1, 1.1),
	('Max the Great', 4, 4.9);
	
============================================================

what happens if we execute these commands?

INSERT INTO cats(name, age)
VALUES('The Boss', 3);

INSERT INTO cats(name, weight)
VALUES('The Boss', 3.7);

INSERT INTO cats(age, weight)
VALUES(3, 3.3);

============================================================

back to pragma and default value

CREATE TABLE cats(
	name VARCHAR(50) DEFAULT 'unnamed_cat',
	age INT DEFAULT -1,
	weight REAL DEFAULT -1.0
);

INSERT INTO cats(name, age)
VALUES('The Boss', 3);

INSERT INTO cats(name, weight)
VALUES('The Boss', 3.7);

INSERT INTO cats(age, weight)
VALUES(3, 3.3);

============================================================

CREATE TABLE cats(
	id INT PRIMARY KEY,
	name VARCHAR(50) DEFAULT 'unnamed_cat',
	age INT DEFAULT -1,
	weight REAL DEFAULT -1.0
);

============================================================

A or B?

A.
CREATE TABLE cats(
	id INT PRIMARY KEY AUTOINCREMENT,
	name VARCHAR(50) DEFAULT 'unnamed_cat',
	age INT DEFAULT -1,
	weight REAL DEFAULT -1.0
);

B.
CREATE TABLE cats(
	id INTEGER PRIMARY KEY AUTOINCREMENT,
	name VARCHAR(50) DEFAULT 'unnamed_cat',
	age INT DEFAULT -1,
	weight REAL DEFAULT -1.0
);

============================================================

new table:
CREATE TABLE cats(
	id INTEGER PRIMARY KEY AUTOINCREMENT,
	name VARCHAR(50) DEFAULT 'unnamed_cat',
	age INT DEFAULT -1,
	weight REAL DEFAULT -1.0,
	breed VARCHAR(25) DEFAULT 'unknown_breed'
);

INSERT INTO cats(name, age, weight, breed)
VALUES('Kitty', 3, 3.6, 'tabby'),
	('Lili', 1, 1.1, 'maine coon'),
	('Max the Great', 4, 4.9, 'norwegian forest'),
	('King Henry', 4, 5.7, 'shorthair'),
	('Lucy', 6, 3.5, 'shorthair'),
	('Ginny', 2, 2.1, 'ginger');

SELECT * FROM cats;
SELECT name FROM cats;
SELECT name, age FROM cats;
SELECT age, name FROM cats;

p.s. order matters
	
============================================================

adding conditions with WHERE clause (for selection, update, and deletion)

SELECT * FROM cats WHERE age=4;

============================================================

which is the command to get the row(s) for cats whose name is 'King Henry'?

A.
SELECT * FROM cats WHERE name='King Henry';	

B.
SELECT * FROM cats WHERE name='king henry';	

C.
A and B

============================================================

alias

SELECT name, weight AS 'chonky level' FROM cats;

============================================================

UPDATE cats SET breed='maine coon' WHERE breed='tabby';
UPDATE cats SET breed='cute breed' WHERE TRUE;
UPDATE cats SET breed='cute breed';

p.s. it's possible to update several columns at the same time

DELETE FROM cats WHERE name='King Henry';
DELETE FROM cats; -- where true, will clean the table

============================================================

CREATE TABLE cat_books(
	id INTEGER PRIMARY KEY AUTOINCREMENT,
	title VARCHAR(200) NOT NULL,
	author_fname VARCHAR(20) NOT NULL,
	author_lname VARCHAR(20) NOT NULL,
	release_year INT NOT NULL,
	copy INT NOT NULL
);

INSERT INTO cat_books(title, author_fname, author_lname, release_year, copy)
VALUES ('Say Meow? How to be cute while maintaining authority.', 'John', 'Blue', 1999, 250),
		('Cleo-cat-ra. An anthology of powerful cats throughout the ages.', 'John', 'Green', 2010, 500),
		('Half-empty food bowl. A tragic story of how a house kitten was neglected for 3 minutes. A NYT Bestseller.', 'Richard', 'Meowkins', 2000, 1000),
		('Nostra-catmus. Cat domination has been prophecied.', 'Meowchel', 'Nostradame', 1549, 3),
		('Catmopolitan 2021. Full tricks to master your human. Right here, right meow.', 'Izzy', 'Lizzy', 2021, 345),
		('Catnip Everdeen. After the hunger games.', 'Catnip', 'Everdeen', 2009, 999),
		('I see you from the top of the cupboard.', 'Primrose', 'Everdeen', 2007, 75),
		('Let me out. Now let me in.', 'Richard', 'Meowkins', 1995, 29),
		('My life is pawtastic.', 'Meowlin', 'Monroe', 1968, 35),
		('Terrible tree house, terrible treats: story of my life.', 'Catliam', 'Shakespeare', 1600, 5);
		
============================================================

which command is for selecting uniqe author_lname?

A.
SELECT UNIQUE author_lname FROM cat_books;

B.
SELECT DISTINCT author_lname FROM cat_books;
		
C.
A and B
		
============================================================

which command is for selecting unique author_fname and author_lname

A.
SELECT UNIQUE author_fname, UNIQUE author_lname FROM cat_books;

B.
SELECT DISTINCT author_fname, DISTINCT author_lname FROM cat_books;

C.
SELECT DISTINCT author_fname, author_lname FROM cat_books;
		
D.
B and C

============================================================

Concatenate several strings/columns using the || operator.
p.s. in other dbms it is CONCAT() etc.

SELECT 'Hello' || ', ' || 'world!';

SELECT author_fname || ' ' || author_lname AS 'full name'
FROM cat_books;

SELECT DISTINCT author_fname || ' ' || author_lname AS 'full name'
FROM cat_books;

SELECT author_fname AS first, author_lname AS last, author_fname || ' ' || author_lname AS full FROM cat_books;

============================================================

SELECT author_lname FROM cat_books ORDER BY author_lname;
SELECT author_fname, author_lname FROM cat_books ORDER BY author_lname DESC, author_fname;
SELECT author_fname, author_lname FROM cat_books ORDER BY 1, 2 DESC;

============================================================

SELECT title, copy FROM cat_books ORDER BY 2;
SELECT title, copy FROM cat_books ORDER BY 2 LIMIT 5;
SELECT title, copy FROM cat_books ORDER BY 2 LIMIT 1, 5;

============================================================

SELECT author_lname FROM cat_books WHERE author_lname = 'Green';
SELECT author_lname FROM cat_books WHERE author_lname LIKE '%een%';
SELECT copy FROM cat_books WHERE copy LIKE '___';

============================================================

SELECT SUBSTRING('Hello, world!', 1, 6);
SELECT SUBSTRING('Hello, world!', 8);

SELECT SUBSTRING(title, 1, 15) || '...' as title
FROM cat_books;

SELECT SUBSTRING(UPPER(title), 1, 15) || '...' as title
FROM cat_books;

SELECT 'CATS BOOK OF THE MONTH: ' || LOWER(title) as title
FROM cat_books;

SELECT UPPER(author_fname) || ' ' || UPPER(author_lname) AS 'author full name'
FROM cat_books;

============================================================

SELECT * FROM cat_books;
SELECT COUNT(*) FROM cat_books; 
SELECT COUNT(DISTINCT author_lname) FROM cat_books;
SELECT COUNT(DISTINCT author_fname) FROM cat_books;

p.s. in other dbms, this will be: COUNT(DISTINCT author_fname, author_lname)

SELECT COUNT(DISTINCT author_fname || author_lname) FROM cat_books;

============================================================

SELECT AVG(copy) FROM cat_books;
SELECT MAX(copy) FROM cat_books;
SELECT MIN(copy) FROM cat_books;

============================================================

difference between count and sum

SELECT COUNT(copy) FROM cat_books;
SELECT SUM(copy) FROM cat_books;

============================================================

now grouping the aggregate based on some columns

SELECT author_fname, author_lname, AVG(copy)
FROM cat_books
GROUP BY author_fname, author_lname; 

SELECT author_fname, author_lname, COUNT(*), SUM(copy), AVG(copy) 
FROM cat_books
GROUP BY author_fname, author_lname;

============================================================

